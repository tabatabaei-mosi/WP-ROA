def split_solution(solution, num_inj=0, n_params=4):
    """
    split the solution to injection wells and production wells

    Args:
        solution (list): a solution that generated by algorithm
        num_inj (int): number of injection wells, default = 0
        n_parmas (int): number of each well parameters, default = 4

    Return:
        param_inj (list): including injection wells parameters
        param_prod (list): including production wells parameters
    """
    # split the whole solution list to 2 parts, injections and productions
    param_inj = solution[:num_inj*n_params]
    param_prod = solution[num_inj*n_params:]
    return param_inj, param_prod


def decode_solution(solution, num_inj=0, num_prod=1, n_params=4):
    """
    decode solution to 4 parts: locations of injections, perforations of injection, locations of productions and perforations of productions

    Args:
        solution (list): a solution that generated by algorithm
        num_inj (int): number of injection wells, default = 0
        num_prod (int): number of production wells, default = 1
        n_parmas (int): number of each well parameters, default = 4

    Return:
        locs_inj (list): including locations of injections, ex. : [[i1, j1], [i2, j2]]
        perfs_inj (list): including perforations of injections
        locs_prod (list): including locations of productions
        perfs_prod (list): including perforations of productions
    """
    # get injections and production pramateres from split_solution
    param_inj, param_prod = split_solution(solution, num_inj, n_params)

    # store final locations and perforations of injection
    locs_inj = []
    perfs_inj = []

    # the variables to slice the list to location and perforation
    start = 0
    slice_loc = 2
    slice_perf = 4

    # a for loop to append each injection well params
    for i in range(num_inj):
        locs_inj.append(param_inj[start:start+slice_loc])
        perfs_inj.append(param_inj[start+slice_loc:start+slice_perf])
        start += n_params

    # store final locations and perforations of productions
    locs_prod = []
    perfs_prod = []

    start = 0
    # a for loop to append each production well params
    for i in range(num_prod):
        locs_prod.append(param_prod[start:start+slice_loc])
        perfs_prod.append(param_prod[start+slice_loc:start+slice_perf])
        start += n_params

    return locs_inj, perfs_inj, locs_prod, perfs_prod